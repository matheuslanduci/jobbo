/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteImport } from './routes/_admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminLoginRouteImport } from './routes/admin.login'
import { Route as AdminAdminIndexRouteImport } from './routes/_admin/admin.index'
import { Route as AdminAdminUsersRouteImport } from './routes/_admin/admin.users'
import { Route as AdminAdminSettingsRouteImport } from './routes/_admin/admin.settings'
import { Route as AdminAdminJobsRouteImport } from './routes/_admin/admin.jobs'
import { Route as AdminAdminUsersIndexRouteImport } from './routes/_admin/admin.users.index'
import { Route as AdminAdminSettingsIndexRouteImport } from './routes/_admin/admin.settings.index'
import { Route as AdminAdminJobsIndexRouteImport } from './routes/_admin/admin.jobs.index'
import { Route as AdminAdminSettingsAccountRouteImport } from './routes/_admin/admin.settings.account'
import { Route as AdminAdminJobsNewRouteImport } from './routes/_admin/admin.jobs.new'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const AdminRoute = AdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminLoginRoute = AdminLoginRouteImport.update({
  id: '/admin/login',
  path: '/admin/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminAdminIndexRoute = AdminAdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAdminUsersRoute = AdminAdminUsersRouteImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAdminSettingsRoute = AdminAdminSettingsRouteImport.update({
  id: '/admin/settings',
  path: '/admin/settings',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAdminJobsRoute = AdminAdminJobsRouteImport.update({
  id: '/admin/jobs',
  path: '/admin/jobs',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAdminUsersIndexRoute = AdminAdminUsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminAdminUsersRoute,
} as any)
const AdminAdminSettingsIndexRoute = AdminAdminSettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminAdminSettingsRoute,
} as any)
const AdminAdminJobsIndexRoute = AdminAdminJobsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminAdminJobsRoute,
} as any)
const AdminAdminSettingsAccountRoute =
  AdminAdminSettingsAccountRouteImport.update({
    id: '/account',
    path: '/account',
    getParentRoute: () => AdminAdminSettingsRoute,
  } as any)
const AdminAdminJobsNewRoute = AdminAdminJobsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AdminAdminJobsRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin/jobs': typeof AdminAdminJobsRouteWithChildren
  '/admin/settings': typeof AdminAdminSettingsRouteWithChildren
  '/admin/users': typeof AdminAdminUsersRouteWithChildren
  '/admin': typeof AdminAdminIndexRoute
  '/admin/jobs/new': typeof AdminAdminJobsNewRoute
  '/admin/settings/account': typeof AdminAdminSettingsAccountRoute
  '/admin/jobs/': typeof AdminAdminJobsIndexRoute
  '/admin/settings/': typeof AdminAdminSettingsIndexRoute
  '/admin/users/': typeof AdminAdminUsersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin/login': typeof AdminLoginRoute
  '/admin': typeof AdminAdminIndexRoute
  '/admin/jobs/new': typeof AdminAdminJobsNewRoute
  '/admin/settings/account': typeof AdminAdminSettingsAccountRoute
  '/admin/jobs': typeof AdminAdminJobsIndexRoute
  '/admin/settings': typeof AdminAdminSettingsIndexRoute
  '/admin/users': typeof AdminAdminUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_admin': typeof AdminRouteWithChildren
  '/admin/login': typeof AdminLoginRoute
  '/_admin/admin/jobs': typeof AdminAdminJobsRouteWithChildren
  '/_admin/admin/settings': typeof AdminAdminSettingsRouteWithChildren
  '/_admin/admin/users': typeof AdminAdminUsersRouteWithChildren
  '/_admin/admin/': typeof AdminAdminIndexRoute
  '/_admin/admin/jobs/new': typeof AdminAdminJobsNewRoute
  '/_admin/admin/settings/account': typeof AdminAdminSettingsAccountRoute
  '/_admin/admin/jobs/': typeof AdminAdminJobsIndexRoute
  '/_admin/admin/settings/': typeof AdminAdminSettingsIndexRoute
  '/_admin/admin/users/': typeof AdminAdminUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin/login'
    | '/admin/jobs'
    | '/admin/settings'
    | '/admin/users'
    | '/admin'
    | '/admin/jobs/new'
    | '/admin/settings/account'
    | '/admin/jobs/'
    | '/admin/settings/'
    | '/admin/users/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin/login'
    | '/admin'
    | '/admin/jobs/new'
    | '/admin/settings/account'
    | '/admin/jobs'
    | '/admin/settings'
    | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/_admin'
    | '/admin/login'
    | '/_admin/admin/jobs'
    | '/_admin/admin/settings'
    | '/_admin/admin/users'
    | '/_admin/admin/'
    | '/_admin/admin/jobs/new'
    | '/_admin/admin/settings/account'
    | '/_admin/admin/jobs/'
    | '/_admin/admin/settings/'
    | '/_admin/admin/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AdminLoginRoute: typeof AdminLoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/login': {
      id: '/admin/login'
      path: '/admin/login'
      fullPath: '/admin/login'
      preLoaderRoute: typeof AdminLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin/admin/': {
      id: '/_admin/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminAdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/admin/users': {
      id: '/_admin/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminAdminUsersRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/admin/settings': {
      id: '/_admin/admin/settings'
      path: '/admin/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminAdminSettingsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/admin/jobs': {
      id: '/_admin/admin/jobs'
      path: '/admin/jobs'
      fullPath: '/admin/jobs'
      preLoaderRoute: typeof AdminAdminJobsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/admin/users/': {
      id: '/_admin/admin/users/'
      path: '/'
      fullPath: '/admin/users/'
      preLoaderRoute: typeof AdminAdminUsersIndexRouteImport
      parentRoute: typeof AdminAdminUsersRoute
    }
    '/_admin/admin/settings/': {
      id: '/_admin/admin/settings/'
      path: '/'
      fullPath: '/admin/settings/'
      preLoaderRoute: typeof AdminAdminSettingsIndexRouteImport
      parentRoute: typeof AdminAdminSettingsRoute
    }
    '/_admin/admin/jobs/': {
      id: '/_admin/admin/jobs/'
      path: '/'
      fullPath: '/admin/jobs/'
      preLoaderRoute: typeof AdminAdminJobsIndexRouteImport
      parentRoute: typeof AdminAdminJobsRoute
    }
    '/_admin/admin/settings/account': {
      id: '/_admin/admin/settings/account'
      path: '/account'
      fullPath: '/admin/settings/account'
      preLoaderRoute: typeof AdminAdminSettingsAccountRouteImport
      parentRoute: typeof AdminAdminSettingsRoute
    }
    '/_admin/admin/jobs/new': {
      id: '/_admin/admin/jobs/new'
      path: '/new'
      fullPath: '/admin/jobs/new'
      preLoaderRoute: typeof AdminAdminJobsNewRouteImport
      parentRoute: typeof AdminAdminJobsRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AdminAdminJobsRouteChildren {
  AdminAdminJobsNewRoute: typeof AdminAdminJobsNewRoute
  AdminAdminJobsIndexRoute: typeof AdminAdminJobsIndexRoute
}

const AdminAdminJobsRouteChildren: AdminAdminJobsRouteChildren = {
  AdminAdminJobsNewRoute: AdminAdminJobsNewRoute,
  AdminAdminJobsIndexRoute: AdminAdminJobsIndexRoute,
}

const AdminAdminJobsRouteWithChildren = AdminAdminJobsRoute._addFileChildren(
  AdminAdminJobsRouteChildren,
)

interface AdminAdminSettingsRouteChildren {
  AdminAdminSettingsAccountRoute: typeof AdminAdminSettingsAccountRoute
  AdminAdminSettingsIndexRoute: typeof AdminAdminSettingsIndexRoute
}

const AdminAdminSettingsRouteChildren: AdminAdminSettingsRouteChildren = {
  AdminAdminSettingsAccountRoute: AdminAdminSettingsAccountRoute,
  AdminAdminSettingsIndexRoute: AdminAdminSettingsIndexRoute,
}

const AdminAdminSettingsRouteWithChildren =
  AdminAdminSettingsRoute._addFileChildren(AdminAdminSettingsRouteChildren)

interface AdminAdminUsersRouteChildren {
  AdminAdminUsersIndexRoute: typeof AdminAdminUsersIndexRoute
}

const AdminAdminUsersRouteChildren: AdminAdminUsersRouteChildren = {
  AdminAdminUsersIndexRoute: AdminAdminUsersIndexRoute,
}

const AdminAdminUsersRouteWithChildren = AdminAdminUsersRoute._addFileChildren(
  AdminAdminUsersRouteChildren,
)

interface AdminRouteChildren {
  AdminAdminJobsRoute: typeof AdminAdminJobsRouteWithChildren
  AdminAdminSettingsRoute: typeof AdminAdminSettingsRouteWithChildren
  AdminAdminUsersRoute: typeof AdminAdminUsersRouteWithChildren
  AdminAdminIndexRoute: typeof AdminAdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAdminJobsRoute: AdminAdminJobsRouteWithChildren,
  AdminAdminSettingsRoute: AdminAdminSettingsRouteWithChildren,
  AdminAdminUsersRoute: AdminAdminUsersRouteWithChildren,
  AdminAdminIndexRoute: AdminAdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AdminLoginRoute: AdminLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
